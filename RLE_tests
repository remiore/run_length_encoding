from rle import rle_decompress, rle_compress
import unittest

class TestRle(unittest.TestCase):
  """
  Class for testing rle.
  """
  
  def test_rle_decompress(self):
    self.assertEqual(rle_decompress(['1', 3, 'a', 2, '3',1]), (['1','1','1','a','a','3']))
    self.assertEqual(rle_decompress(['b', 5, 'c', 2]), (['b','b','b','b','b','c','c']))
    self.assertEqual(rle_decompress(['0', 1, '0', 2]), (['0', '0', '0']))
    self.assertEqual(rle_decompress(['-', 1, 'x', 2]), (['-', 'x', 'x']))
    self.assertEqual(rle_decompress(['0', 1, '0', 2]), (['0', '0', '0']))
    self.assertEqual(rle_decompress(['I', 1, '0', 2]), (['I', '0', '0']))
    self.assertEqual(rle_decompress([]), ([]))
    self.assertEqual(rle_decompress(['$', 1, '@', 2]), (['$', '@', '@']))
    self.assertEqual(rle_decompress(['',5]), ([]))

 
  def test_rle_compress(self):
    self.assertEqual(rle_compress(['1','1','1','a','a','3']), (['1', 3, 'a', 2, '3',1]))
    self.assertEqual(rle_compress(['b','b','b','b','b','c','c']), (['b', 5, 'c', 2]))
    self.assertEqual(rle_compress(['0', '0', '0']), (['0', 3]))
    self.assertEqual(rle_compress(['-', 'x', 'x']), (['-', 1, 'x', 2]))
    self.assertEqual(rle_compress(['1', '2', '3']), (['1', 1, '2', 1, '3', 1]))
    self.assertEqual(rle_compress(['I', '0', '0']), (['I', 1, '0', 2]))
    self.assertEqual(rle_compress([]), ([]))
    self.assertEqual(rle_compress(['$', '@', '@']), (['$', 1, '@', 2]))

if __name__ == '__main__':
    unittest.main()
